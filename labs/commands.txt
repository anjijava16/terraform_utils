C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform.exe version
Terraform v1.0.7
on windows_amd64

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform.exe -help
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  test          Experimental support for module integration testing
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output, or the help for a specified subcommand.
  -version      An alias for the "version" subcommand.

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform.exe init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.1.0...
- Installed hashicorp/local v2.1.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform.exe plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "we love pets"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "C:/Tech_Learn_welcome/Dev_OPS/IAC_teraform/files/pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "we love pets"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "C:/Tech_Learn_welcome/Dev_OPS/IAC_teraform/files/pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=d87a5018d4e1c1e1644d11eafcdf53a95c8968ef]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "we love pets"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "C:/Tech_Learn_welcome/Dev_OPS/IAC_teraform/files/pets.txt"
    id                   = "d87a5018d4e1c1e1644d11eafcdf53a95c8968ef"
}

C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform destory
Terraform has no command named "destory". Did you mean "destroy"?

To see all of Terraform's top-level commands, run:
  terraform -help


C:\Tech_Learn_welcome\Dev_OPS\IAC_teraform\terraform_1.0.7_windows_amd64>terraform destroy
local_file.pet: Refreshing state... [id=d87a5018d4e1c1e1644d11eafcdf53a95c8968ef]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # local_file.pet will be destroyed
  - resource "local_file" "pet" {
      - content              = "we love pets" -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0777" -> null
      - filename             = "C:/Tech_Learn_welcome/Dev_OPS/IAC_teraform/files/pets.txt" -> null
      - id                   = "d87a5018d4e1c1e1644d11eafcdf53a95c8968ef" -> null
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value:
